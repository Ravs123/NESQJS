TASK (Node JS Express, postgreSQL)

-- Create a node js project , install required modules , create a PORT and connect to DB (POSTGREsql): Completed
--test the DB connection and fetch whole data : Completed
--Perform CURD operations and test the API's in POSTMAN : Completed
--Sign up and login : POST and GET API's 
--Edit user Profile and update password 
--Build a Schema for data validation(joi module)
--implement JWT auth and encrypt/dcrypt password
--Send Grid -Mail
--try implementing razorpay 


--PostgreSql Practice test 

/*DDL Commands :CREATE,ALTER,DROP,TURNCATE
Data Types : varchar, int , date , boolean
Constraints : PRIMARY KEY , FOREGIN KEY , UNIQUE , CHECK & NOT NULL
DML Commands : INSERT,UPDATE,DELETE,MERGE
TCL Commands : COMMITE ,ROLLBACK & SAVE POINT
DCL Commands : GRANT & REVOKE 
DQL Commands : SELECT COMMANDS */

*******************************************************************************************************
/*-->Basic SQL concepts and query           -->Intermediate SQL concepts & query
--OPERATORS                                 .subqueries   
.comparison operator                        .WITH clause        
.Arithmetic operator                        .Group BY and HAVING clause    
.logical operator                           .Aggregate function    
.UNION and UNION ALL                        .JOIN(LEFT,RIGHT,FULL,OUTER,CROSS)

--Inbuilt functions 
.Date function : TO_DATE,DATE_FORMATE,CAST
.String function:TO_CHAR,SUBSTRING,FORMATE,POSITION,CONVERT */

*********************************************************************************************************
/*
Advance SQL concepts
SELF JOIN query
WINDOW query
Recursive SQL Queries 
Stored procedures(function procedures)
User defined functions
************************************************************
***Data Types****
Primitives: Integer, Numeric, String, Boolean
Structured: Date/Time, Array, Range / Multirange, UUID
Document: JSON/JSONB, XML, Key-value (Hstore)
Geometry: Point, Line, Circle, Polygon
Customizations: Composite, Custom Types
************************************************************
******Data Integrity*******
UNIQUE, NOT NULL
Primary Keys
Foreign Keys
Exclusion Constraints
Explicit Locks, Advisory Locks
************************************************************
**********Concurrency, Performance********
Indexing: B-tree, Multicolumn, Expressions, Partial
Advanced Indexing: GiST, SP-Gist, KNN Gist, GIN, BRIN, Covering indexes, Bloom filters
Sophisticated query planner / optimizer, index-only scans, multicolumn statistics
Transactions, Nested Transactions (via savepoints)
Multi-Version concurrency Control (MVCC)
Parallelization of read queries and building B-tree indexes
Table partitioning
All transaction isolation levels defined in the SQL standard, including Serializable
Just-in-time (JIT) compilation of expressions
*************************************************************
**********Reliability, Disaster Recovery***********
Write-ahead Logging (WAL)
Replication: Asynchronous, Synchronous, Logical
Point-in-time-recovery (PITR), active standbys
Tablespaces
*************************************************************
*********Security***************
Authentication: GSSAPI, SSPI, LDAP, SCRAM-SHA-256, Certificate, and more
Robust access-control system
Column and row-level security
Multi-factor authentication with certificates and an additional method
*************************************************************
*************Extensibility*********
Stored functions and procedures
Procedural Languages: PL/PGSQL, Perl, Python (and many more)
SQL/JSON path expressions
Foreign data wrappers: connect to other databases or streams with a standard SQL interface
Customizable storage interface for tables
Many extensions that provide additional functionality, including PostGIS
*************************************************************
**********Internationalisation, Text Search**********
Support for international character sets, e.g. through ICU collations
Case-insensitive and accent-insensitive collations
Full-text search


*/